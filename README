========
README
========

This folder contains all the necessary programs and scripts to perform 3d image segmentation and noise removal, as well as calculating the volume of the resulting 3d object. 

With the end goal being volume calculation of interpolated lung nodules, after interpolation, segmentation can be achieved by calling the adaptive_segment_[byte,short].sh script as such:
    ./adaptive_segment[byte,short].sh [in_image] [kernel_size] [num_bins] [out_image]
This is followed by calling the vd3vol_voxel program to get the calculated volume as such:
    ./v3dvol_voxel if=[input_file] xres=[voxel resolution in x dir] yres=[voxel resolution in y dir] zres=[voxel resolution in z dir]

The test scripts bundle this functionality into an easy to use program.

========
Programs
========

test_short_images.sh
* Shell script that can be called on a folder of short images
* Will perform the required segmentation, followed by volume calculation
* Requires parameters for filter kernel size, number of bins for iterative thresholding, and the folder location containing the images to be used.
* Depends on the adaptive_segment_short.sh script and the v3dvol visionx program

test_byte_images.sh
* Shell script very similar to test_short_images.sh, but works on byte images
* Depends on adaptive_segment_byte.sh and v3dvol

adaptive_segment_short.sh
* script to perform adaptive segmentation through iterative thresholding of the image
* only works on short images
* paramters: input image location, kernel size, number of bins, output image location

adaptive_segment_byte.sh
* same as adaptive_segment_short.sh, but for byte images

segment.sh
* shell script to segment and perform noise removal on input 3d image with a user defined threshold
* only works on byte images

test_segment.sh
* shell script to generate simple byte test images, and run the segment script on the tests
* also performs volume calculation on the output images from the segment script

test_segment_abstract.sh
* shell script to use existing test images in a folder, and perform segmentation & volume calculations on them using the developed utilities
* used to perform tests and gather results for the abstract report

v3dvol.c [v3dvol]
* VisionX program to perform volume calculation of a 3d image
* volume calculation must be performed on a binary image (0 & 255)
* voxels with values of 255 are included in volume calculation

v3dvol_voxel.c [v3dvol_voxel]
* same as v3dvol, but takes into account the voxel size of the image
* voxel size is passed in as x,y,z parameters specifying the x-y-z resolution

vits_short.c [vits_short]
* VisionX program to perform iterative thresholding of a 3d image
* input parameter 'b' specifies the number of bins to use for the interative thresholding
* must be used with 'short' images
* any pixel in the image with a value greater than the max bin is placed in the max bin.

vits_byte.c [vits_byte]
* Same thing as vits_short, but for byte images

cleanup.sh
* simple shell script to quickly remove temporary files

========
Directories
========

test_segmentation
* directory to hold simple test images
* also contains output images from running segment.sh

abstract_images
* directory to hold images used for analysis in our abstract report
* contains test images, and output images (prefixed with out_) resulting from running test_segment_abstract.sh

ct_images
* directory to hold sample CT images to run tests on

reportfiles
* images for inclusion in the final report.
* results of the final volume calculations on all the images are stored in the volume_result_data.txt file

==========
Program Man Pages
==========

v3dvol & v3dvol_voxel
-----------------------------
These programs performed the volume calculation of 3d images. Binary images are accepted as input files, and they are iterated through pixel by pixel. Every pixel with a value of 255 is considered part of the object. At the end, the total number of object pictures- qualitatively the volume- is returned. In the more advanced v3dvol_voxel, voxel density is also taken into account, as is specified upon invocation of the program as xres, yres, and zres values, specifying the size of the voxel in each dimension. This information is then used to multiply the resulting object volume by xres*yres*zres, thus scaling the object volume by the voxel resolution.

vits_[byte, short]
---------------------
The vits program is what performs adaptive iterative thresholding of an input image. The only argument it expects other than an input file and output location is the number of "bins" in the image. This is essentially the range of pixel values possible in the image. Specifying a lower number of bins than actually exist in the image will simply cause pixels of greater value to be truncated down to the max value. The two incarnations of vits work on byte and short images respectively.

adaptive_segment_[byte, short]
----------------------------------------
The adaptive segment script encapsulates all the steps necessary to take an input image in VisionX format, and generate a segmented, morphologically filtered, VisionX 3d output image. It takes as input the input image location, desired kernel size for morphological filtering, number of bins for iterative thresholding, and output location. The name is sort of a misnomer because this script performs not only segmentation, but also filtering. Again, the two versions work on byte and short images respectively.

test_[byte, short]_images
--------------------------------
These two scripts tie in all the other software components associated with segmentation, filtering, and volume calculation into one command line invocation. This script exists mainly for convenience, and expects as arguments for filter kernel size, number of bins for iterative thresholding, x-y-z voxel resolution for volume calculation, and the folder location containing the images to be run through the system. When run correctly, it will perform all the steps on an image necessary to arrive at a final volume result and isolated nodule.
